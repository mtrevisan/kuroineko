require(['tools/lang/morphology/Conjugator'], function(Conjugator){
	QUnit.module('ExtractVerbsForms');

	QUnit.test('portàr', function(assert){
		var forms = Conjugator.extractForms('portàr');

		var expected = [
			'#pòrte',
			'#pòrto',
			'#pòrti',
			'#pòrta',
			'#portè',
			'#porté',
			'#porton',
			'#porten',
			'#portemo',
			'#portarà',
			'#portarè',
			'#portarò',
			'#portaré',
			'#portaremo',
			'#portaron',
			'#portaren',
			'portar#',
			'portare',
			'portante',
			'portà',
			'portasto',
			'portasti',
			'portasta',
			'portaste',
			'#portase',
			'#portasi',
			'#portàsimo',
			'#portaría',
			'#portaríe',
			'#portaresi',
			'#portarésimo',
			'portando#',
			'#portaa',
			'#portava',
			'#portae',
			'#portave',
			'#portao',
			'#portavo',
			'#portai',
			'#portavi',
			'#portié',
			'#portivié',
			'#portàimo',
			'#portàvimo',
			'#portonse',
			'#portion',
			'#portionse',
			'#portivon',
			'#portivonse',
			'#portivion',
			'#portivionse',
			'#portense',
			'#portiven',
			'#portivense',
			'portao',
			'portado',
			'portai',
			'portadi',
			'portaa',
			'portada',
			'portae',
			'portade',
			'#portiede',
			'#portiege',
			'#portisié',
			'#portisiede',
			'#portisiege',
			'#portone',
			'#portione',
			'#portison',
			'#portisone',
			'#portisonse',
			'#portision',
			'#portisione',
			'#portisionse',
			'#portene',
			'#portisen',
			'#portisene',
			'#portisense',
			'#portede',
			'#portege',
			'#portarié',
			'#portarisié',
			'#portaronse',
			'#portarion',
			'#portarionse',
			'#portarison',
			'#portarisonse',
			'#portarision',
			'#portarisionse',
			'#portarense',
			'#portarisen',
			'#portarisense',
			'#portarae',
			'#portarave'
		];

		assert.deepEqual(forms, expected);
	});

	QUnit.test('valér', function(assert){
		var forms = Conjugator.extractForms('valér');

		var expected = [
			'#vale',
			'#valo',
			'#vali',
			'#valé',
			'#valí',
			'#valon',
			'#valen',
			'#valemo',
			'#valimo',
			'#valerà',
			'#valerè',
			'#valerò',
			'#valeré',
			'#valerí',
			'#valeremo',
			'#valeron',
			'#valeren',
			'#valerimo',
			'valer#',
			'valere',
			'valente',
			'valú',
			'valesto',
			'valesti',
			'valesta',
			'valeste',
			'valso',
			'valsi',
			'valsa',
			'valse',
			'#valese',
			'#valesi',
			'#valésimo',
			'#vala',
			'#valería',
			'#valeríe',
			'#valeresi',
			'#valerésimo',
			'valendo#',
			'#valea',
			'#valeva',
			'#valee',
			'#valeve',
			'#valeo',
			'#valevo',
			'#valei',
			'#valevi',
			'#valié',
			'#valivié',
			'#valéimo',
			'#valévimo',
			'#valonse',
			'#valion',
			'#valionse',
			'#valivon',
			'#valivonse',
			'#valivion',
			'#valivionse',
			'#valense',
			'#valiven',
			'#valivense',
			'valuo',
			'valudo',
			'valui',
			'valudi',
			'valua',
			'valuda',
			'value',
			'valude',
			'#valiede',
			'#valiege',
			'#valisié',
			'#valisiede',
			'#valisiege',
			'#valone',
			'#valione',
			'#valison',
			'#valisone',
			'#valisonse',
			'#valision',
			'#valisione',
			'#valisionse',
			'#valene',
			'#valisen',
			'#valisene',
			'#valisense',
			'#valede',
			'#valege',
			'#valerié',
			'#valerisié',
			'#valeronse',
			'#valerion',
			'#valerionse',
			'#valerison',
			'#valerisonse',
			'#valerision',
			'#valerisionse',
			'#valerense',
			'#valerisen',
			'#valerisense',
			'#valerae',
			'#valerave'
		];

		assert.deepEqual(forms, expected);
	});

	QUnit.test('béver', function(assert){
		var forms = Conjugator.extractForms('béver');

		var expected = [
			'#beve',
			'#bevo',
			'#bevi',
			'#bevé',
			'#beví',
			'#bevon',
			'#beven',
			'#bevemo',
			'#bevimo',
			'#beverà',
			'#beverè',
			'#beverò',
			'#beveré',
			'#beverí',
			'#beveremo',
			'#beveron',
			'#beveren',
			'#beverimo',
			'béver#',
			'bévere',
			'bevente',
			'bevú',
			'bevesto',
			'bevesti',
			'bevesta',
			'beveste',
			'#bevese',
			'#bevesi',
			'#bevésimo',
			'#beva',
			'#bevería',
			'#beveríe',
			'#beveresi',
			'#beverésimo',
			'bevendo#',
			'#bevea',
			'#beveva',
			'#bevee',
			'#beveve',
			'#beveo',
			'#bevevo',
			'#bevei',
			'#bevevi',
			'#bevié',
			'#bevivié',
			'#bevéimo',
			'#bevévimo',
			'#bevonse',
			'#bevion',
			'#bevionse',
			'#bevivon',
			'#bevivonse',
			'#bevivion',
			'#bevivionse',
			'#bevense',
			'#beviven',
			'#bevivense',
			'bevuo',
			'bevudo',
			'bevui',
			'bevudi',
			'bevua',
			'bevuda',
			'bevue',
			'bevude',
			'#beviede',
			'#beviege',
			'#bevisié',
			'#bevisiede',
			'#bevisiege',
			'#bevone',
			'#bevione',
			'#bevison',
			'#bevisone',
			'#bevisonse',
			'#bevision',
			'#bevisione',
			'#bevisionse',
			'#bevene',
			'#bevisen',
			'#bevisene',
			'#bevisense',
			'#bevede',
			'#bevege',
			'#beverié',
			'#beverisié',
			'#beveronse',
			'#beverion',
			'#beverionse',
			'#beverison',
			'#beverisonse',
			'#beverision',
			'#beverisionse',
			'#beverense',
			'#beverisen',
			'#beverisense',
			'#beverae',
			'#beverave'
		];

		assert.deepEqual(forms, expected);
	});

	QUnit.test('dormír', function(assert){
		var forms = Conjugator.extractForms('dormír');

		var expected = [
			'#dòrme',
			'#dòrmo',
			'#dòrmi',
			'#dormí',
			'#dormé',
			'#dormon',
			'#dormen',
			'#dormimo',
			'#dormirà',
			'#dormirè',
			'#dormirò',
			'#dormiré',
			'#dormiremo',
			'#dormiron',
			'#dormiren',
			'dormir#',
			'dormire',
			'dormente',
			'dormí',
			'dormisto',
			'dormisti',
			'dormista',
			'dormiste',
			'dormesto',
			'dormesti',
			'dormesta',
			'dormeste',
			'#dormise',
			'#dormisi',
			'#dormísimo',
			'#dòrma',
			'#dormiría',
			'#dormiríe',
			'#dormiresi',
			'#dormirésimo',
			'dormindo#',
			'dormendo#',
			'#dormia',
			'#dormiva',
			'#dormie',
			'#dormive',
			'#dormio',
			'#dormivo',
			'#dormii',
			'#dormivi',
			'#dormié',
			'#dormivié',
			'#dormíimo',
			'#dormívimo',
			'#dormonse',
			'#dormion',
			'#dormionse',
			'#dormivon',
			'#dormivonse',
			'#dormivion',
			'#dormivionse',
			'#dormense',
			'#dormiven',
			'#dormivense',
			'dormio',
			'dormido',
			'dormii',
			'dormidi',
			'dormia',
			'dormida',
			'dormie',
			'dormide',
			'#dormiede',
			'#dormiege',
			'#dormisié',
			'#dormisiede',
			'#dormisiege',
			'#dormone',
			'#dormione',
			'#dormison',
			'#dormisone',
			'#dormisonse',
			'#dormision',
			'#dormisione',
			'#dormisionse',
			'#dormene',
			'#dormisen',
			'#dormisene',
			'#dormisense',
			'#dormede',
			'#dormege',
			'#dormide',
			'#dormige',
			'#dormirié',
			'#dormirisié',
			'#dormironse',
			'#dormirion',
			'#dormirionse',
			'#dormirison',
			'#dormirisonse',
			'#dormirision',
			'#dormirisionse',
			'#dormirense',
			'#dormirisen',
			'#dormirisense',
			'#dormirae',
			'#dormirave'
		];

		assert.deepEqual(forms, expected);
	});

	QUnit.test('fenír', function(assert){
		var forms = Conjugator.extractForms('fenír');

		var expected = [
			'#fenise',
			'#feniso',
			'#fenisi',
			'#fení',
			'#fenisé',
			'#fenison',
			'#fenisen',
			'#fenimo',
			'#fenirà',
			'#fenirè',
			'#fenirò',
			'#feniré',
			'#feniremo',
			'#feniron',
			'#feniren',
			'fenir#',
			'fenire',
			'#fené',
			'fenente',
			'fení',
			'fenisto',
			'fenisti',
			'fenista',
			'feniste',
			'fenesto',
			'fenesti',
			'fenesta',
			'feneste',
			'#fenísimo',
			'#fenisa',
			'#feniría',
			'#feniríe',
			'#feniresi',
			'#fenirésimo',
			'fenindo#',
			'fenendo#',
			'#fenia',
			'#feniva',
			'#fenie',
			'#fenive',
			'#fenio',
			'#fenivo',
			'#fenii',
			'#fenivi',
			'#fenié',
			'#fenivié',
			'#feníimo',
			'#fenívimo',
			'#fenon',
			'#fenonse',
			'#fenion',
			'#fenionse',
			'#fenivon',
			'#fenivonse',
			'#fenivion',
			'#fenivionse',
			'#fenen',
			'#fenense',
			'#feniven',
			'#fenivense',
			'fenio',
			'fenido',
			'fenii',
			'fenidi',
			'fenia',
			'fenida',
			'fenie',
			'fenide',
			'#feniede',
			'#feniege',
			'#fenisié',
			'#fenisiede',
			'#fenisiege',
			'#fenone',
			'#fenione',
			'#fenisone',
			'#fenisonse',
			'#fenision',
			'#fenisione',
			'#fenisionse',
			'#fenene',
			'#fenisene',
			'#fenisense',
			'#fenisede',
			'#fenisege',
			'#fenirié',
			'#fenirisié',
			'#fenironse',
			'#fenirion',
			'#fenirionse',
			'#fenirison',
			'#fenirisonse',
			'#fenirision',
			'#fenirisionse',
			'#fenirense',
			'#fenirisen',
			'#fenirisense',
			'#fenirae',
			'#fenirave'
		];

		assert.deepEqual(forms, expected);
	});

	QUnit.test('andàr', function(assert){
		var forms = Conjugator.extractForms('andàr');

		var expected = [
			'#ande',
			'#ando',
			'#andi',
			'#anda',
			'#andè',
			'#andé',
			'#andon',
			'#anden',
			'#andemo',
			'#vàe',
			'#va',
			'#vè',
			'#ve',
			'#von',
			'#ven',
			'#vemo',
			'#andarà',
			'#andarè',
			'#andarò',
			'#andaré',
			'#andaremo',
			'#andaron',
			'#andaren',
			'andar#',
			'andare',
			'andante',
			'andà',
			'andasto',
			'andasti',
			'andasta',
			'andaste',
			'#andase',
			'#andasi',
			'#andàsimo',
			'#andaría',
			'#andaríe',
			'#andaresi',
			'#andarésimo',
			'andando#',
			'#vao',
			'#vago',
			'#andaa',
			'#andava',
			'#andae',
			'#andave',
			'#andao',
			'#andavo',
			'#andai',
			'#andavi',
			'#andié',
			'#andivié',
			'#andàimo',
			'#andàvimo',
			'#andonse',
			'#andion',
			'#andionse',
			'#andivon',
			'#andivonse',
			'#andivion',
			'#andivionse',
			'#andense',
			'#andiven',
			'#andivense',
			'andao',
			'andado',
			'andai',
			'andadi',
			'andaa',
			'andada',
			'andae',
			'andade',
			'#andiede',
			'#andiege',
			'#andisié',
			'#andisiede',
			'#andisiege',
			'#andone',
			'#andione',
			'#andison',
			'#andisone',
			'#andisonse',
			'#andision',
			'#andisione',
			'#andisionse',
			'#andene',
			'#andisen',
			'#andisene',
			'#andisense',
			'#andede',
			'#andege',
			'#vaa',
			'#vaga',
			'#vai',
			'#vagi',
			'#vede',
			'#vege',
			'#vone',
			'#vion',
			'#vione',
			'#vene',
			'#andarié',
			'#andarisié',
			'#andaronse',
			'#andarion',
			'#andarionse',
			'#andarison',
			'#andarisonse',
			'#andarision',
			'#andarisionse',
			'#andarense',
			'#andarisen',
			'#andarisense',
			'#andarae',
			'#andarave'
		];

		assert.deepEqual(forms, expected);
	});

});
